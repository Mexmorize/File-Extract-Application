# Tests FileExtract.py
import unittest, csv, FileExtract, warnings

# Intiate the Class
class test_FileExtract(unittest.TestCase):

    # Create class method to store the data to be used in other tests
    # Essentially re-wrote the function to ensure it is working as intended
    @classmethod
    def setUpClass(cls):
        
        # Although in test cases it is good practice to show all errors,
        # this error does not cause anything to fail and is simply due to the
        # DictReader still being open, however it should actually be closed
        warnings.filterwarnings('ignore', category = ResourceWarning)
        
        # Initiate a list for the data to be stored
        cls.data = []
        
        # Reads the data from the sample test file
        theData = csv.DictReader(open('./population_sample.csv'), delimiter=',')
        
        # Iterate through each row in the Reader
        for row in theData:

            # Appends the information into the dictionary for use testing
            cls.data.append(row)
    
    # Tests the FileExtract.get_data() function
    def test_get_data(self):
        
        # Tests to ensure that the written function is the same as get_data()
        self.assertEqual(FileExtract.get_data('./population_sample.csv'), self.data)
        
        # Tests to ensure the fucntion actually gets values rather than set data
        self.assertNotEqual(FileExtract.get_data('./population.csv'), self.data)
        
        # Tests to ensure that the function throws the proper error when needed
        with self.assertRaises(UnboundLocalError):
            FileExtract.get_data('./poop.txt')
            FileExtract.get_data('./pop.json.txt')
        
    # Tests the FileExtract.get_fav_foods() function
    def test_get_fav_foods(self):
        
        # Tests to ensure that the list generated by the function is the same the expected
        self.assertListEqual(FileExtract.get_fav_foods(self.data), 
                             [('Meatballs', 68), ('Pizza', 65), ('Ice cream', 63)])

    # Tests the FileExtract.get_siblings() function
    def test_get_siblings(self):
        
        # Tests to ensure that the returned value is actually an integer
        self.assertIsInstance(FileExtract.get_siblings(self.data), int)
        
        # Tests to ensure that the final result is as expected for that dataset
        self.assertEqual(FileExtract.get_siblings(self.data), 3)

    # Tests the FileExtract.get_birth_months() function
    def test_get_birth_months(self):
        
        # Tests to ensure that the function returns the expected result
        self.assertDictEqual(FileExtract.get_birth_months(self.data), 
                                        {'January': 825, 'February': 5,
                                         'March': 8,'April': 17,'May': 11,
                                         'June': 16,'July': 13, 'August': 7,
                                         'September': 32,'October': 5, 
                                         'November': 30, 'December': 31})

# Executes this file if requested by the terminal
if __name__ == '__main__':
    unittest.main()